<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css?family=Spectral"
/>
<link
  rel="stylesheet"
  href="https://fonts.googleapis.com/css?family=Federant"
/>
<style>
  :root {
    --darkspace: #040005;
    --planetglow: #ac1159;
    --mars: #880606;
  }
  body {
    margin: 0;
  }
  canvas {
    position: absolute;
  }
  #book-container {
    height: 600px;
  }
  .overlay {
    /*flex*/
    position: absolute;
    z-index: 2;
    color: white;
    display: flex;
    flex-direction: row;
    height: 600px; 
    justify-content: space-between;
    width: 100%;
    text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000,
      1px 1px 0 #000;
  }
  h1 {
    font-family: "Federant";
    font-weight: 300;
    font-size: 58px;
  }
  p {
    font-family: "Spectral";
    font-size: larger;
  }
  #bookstuff {
    width: 50%;
    padding: 50px;
    display: flex;
    flex-direction: column;
  }
  #kindle {
    padding: 20px;
    margin-right: 100px;
  }
  #buttonbox {
    display: flex;
    justify-content: center;
  }

  .pretty-button {
    width: 250px;
    height: 60px;
    color: #b30000;
    font-size: larger;
    font-family: "Spectral";
    font-weight: 800;
    background: transparent;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    display: inline-block;
    outline: none;
    line-height: 42px;
    padding: 0;
    border: none;
    background: #ffffff;
  }
  .pretty-button:hover {
    color: #ffffff;
    font-weight: 500;
    background: #3d0012;
    box-shadow: none;
    text-shadow: -1px -1px 1px#b30000, 1px -1px 1px #b30000, -1px 1px 1px #b30000,
      1px 1px 1px #b30000;
  }
  .pretty-button:before,
  .pretty-button:after {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    height: 2px;
    width: 0;
    background: #ffffff;
    box-shadow: -1px -1px 5px 0px #ff0000, 7px 7px 20px 1px #b30000,
      4px 4px 5px 1px #b30000;
    transition: 400ms ease all;
  }
  .pretty-button:after {
    right: inherit;
    top: inherit;
    left: 0;
    bottom: 0;
  }
  .pretty-button:hover:before,
  .pretty-button:hover:after {
    width: 100%;
    transition: 800ms ease all;
  }

  .glow {
  font-size: 80px;
  color: #fff;
  text-align: center;
  -webkit-animation: glow 1s ease-in-out infinite alternate;
  -moz-animation: glow 1s ease-in-out infinite alternate;
  animation: glow 1s ease-in-out infinite alternate;
}

@-webkit-keyframes glow {
  from {
    text-shadow: 0 0 10px #ff5680, 0 0 20px #ff5680, 0 0 30px #ff5680, 0 0 40px #ac1159, 0 0 50px #ac1159, 0 0 60px #ac1159, 0 0 70px #ac1159;
  }
  to {
    text-shadow: 0 0 20px #ff5680, 0 0 30px #ff0000, 0 0 40px #ff0000, 0 0 50px #ac1159 0 0 60px #ac1159, 0 0 70px #ac1159, 0 0 80px #ac1159;
  }
}
</style>

<body>
  <div id="book-container">
    <div class="overlay">
      <div id="bookstuff">
        <div>
        <h1>This planet will bleed you dry...</h1>
        <br />
        <br />
        <p style="font-size:22px;">"You sweet thing, you are too gentle for this cruel world, too easily used. But I can protect you."</p>
        <p class="glow" style="font-size:30px;font-style:italic; margin-top:-10px; margin-left:20px">"From here on, my pet, you need only fear me."</p>
        </div>
        <div id="buttonbox">
          <button class="pretty-button" type="button">Order on Amazon</button>
        </div>
      </div>
      <img
        id="kindle"
        src="https://lh6.googleusercontent.com/Dn_zLKTgDfkXYo8G2BmPlURoo8LVGfPLHU3UfmVV4ZPI8Zbz_u6Gkp9HXL2RarpuFTZ2_UifaUw9PBBjjdIVMFg"
      />
    </div>
    <canvas id="bg"></canvas>
    <canvas id="stars"></canvas>
    <canvas id="mars"></canvas>
  </div>
</body>

<script>
  //Colors

  const backC = getComputedStyle(
    document.querySelector(":root")
  ).getPropertyValue("--darkspace");
  const starC = "white";
  const marsC = getComputedStyle(
    document.querySelector(":root")
  ).getPropertyValue("--mars");
  const glowC = getComputedStyle(
    document.querySelector(":root")
  ).getPropertyValue("--planetglow");

  //record an array of stars
  const starNum = 75;
  var stepA = 0.25;
  var stepAdir = 1;
  const speedA = 0.02;
  const speedY = -0.25; //only works in one way
  var starArray = [];

  //Get context and screen size;
  var W = document.getElementById("book-container").offsetWidth;
  var H = document.getElementById("book-container").offsetHeight;
  const ctxStars = stars.getContext("2d");
  const ctxMars = mars.getContext("2d");
  const ctxBack = bg.getContext("2d");
  stars.width = W;
  stars.height = H;
  mars.width = W;
  mars.height = H;
  bg.width = W;
  bg.height = H;

  //Get Mars center
  var marsR = W;
  var marsX = W / 2;
  var marsY = marsR * 1.25;

  function drawMars() {
    //Draw Mars
    ctxMars.beginPath();
    ctxMars.arc(marsX, marsY, marsR, 0, 2 * Math.PI);
    ctxMars.fillStyle = marsC;
    ctxMars.fill();
  }

  function drawBack() {
    //Set Canvas and Background Color;
    let my_gradient = ctxBack.createRadialGradient(
      marsX,
      marsY,
      marsR * 0.95,
      marsX,
      marsY,
      marsR * 1.05
    );
    my_gradient.addColorStop(0, glowC);
    my_gradient.addColorStop(1, backC);
    ctxBack.fillStyle = my_gradient;
    ctxBack.fillRect(0, 0, W, H);
  }

  function makeStars() {
    let stars = [];
    //Random position and size of stars;
    for (let i = 0; i < starNum; i++) {
      let x = W * Math.random();
      let y = H * Math.random();
      let r = 5 * Math.random();
      let step = 0;
      let speed = speedY * (Math.random() * (1 - 0.1) + 0.1);
      stars[i] = new Star(x, y, r, step, speed);
    }
    return stars;
  }

  class Star {
    constructor(x, y, r, step, speed) {
      this.x = x;
      this.y = y;
      this.r = r;
      this.step = step;
      this.speed = speed;
    }
  }

  function render() {
    ctxStars.clearRect(0, 0, W, H);

    //
    if (stepA >= 1) {
      stepAdir = 1;
    } else if (stepA <= 0.1) {
      stepAdir = 0;
    }
    //Alpha change
    if (stepAdir == 1) {
      stepA = stepA - speedA;
    } else {
      stepA = stepA + speedA;
    }

    for (let i = 0; i < starArray.length; i++) {
      if (starArray[i].step <= 0) {
        starArray[i].step = H;
      } else {
        starArray[i].step = starArray[i].step + starArray[i].speed;
      }

      ctxStars.beginPath();
      num = Math.abs(stepA + i / starArray.length - 1);
      fillstyle = "rgba(255, 255, 255," + String(num) + ")";
      ctxStars.fillStyle = fillstyle;
      newStarY = (starArray[i].y + starArray[i].step) % H;
      ctxStars.save();
      drawDiamond(starArray[i].x, newStarY, starArray[i].r, starArray[i].r * 2);
      ctxStars.fill();
      ctxStars.restore();
      //add center for extra glow
      ctxStars.arc(
        starArray[i].x,
        newStarY + starArray[i].r,
        starArray[i].r / 5,
        0,
        Math.PI * 2
      );
      ctxStars.fill();
    }
    //ctxStars.globalAlpha = stepA;
    ctxStars.shadowBlur = 5;
    ctxStars.shadowColor = "white";
    //console.log("run render");
  }

  function drawDiamond(x, y, width, height) {
    ctxStars.beginPath();
    ctxStars.moveTo(x, y);

    ctxStars.lineTo(x - width / 2, y + height / 2);
    ctxStars.lineTo(x, y + height);
    ctxStars.lineTo(x + width / 2, y + height / 2);
    ctxStars.closePath();
  }

  function resizeCanvas() {
    W = document.getElementById("book-container").offsetWidth;
    H = document.getElementById("book-container").offsetHeight;
    stars.width = W;
    stars.height = H;
    mars.width = W;
    mars.height = H;
    bg.width = W;
    bg.height = H;

    //Get Mars center
    marsR = W;
    marsX = W / 2;
    marsY = marsR * 1.25;
    drawBack();
    drawMars();
  }

  window.onload = function () {
    window.addEventListener("resize", resizeCanvas, false);
    drawBack();
    drawMars();
    starArray = makeStars();
    setInterval(render, 50);
  };
</script>
